import 'package:flutter_bloc/flutter_bloc.dart';
import '../../repositories/notification_repository.dart';
import 'notification_event.dart';
import 'notification_state.dart';

class NotificationBloc extends Bloc<NotificationEvent, NotificationState> {
  final NotificationRepository _notificationRepository;

  NotificationBloc({
    required NotificationRepository notificationRepository,
  })  : _notificationRepository = notificationRepository,
        super(NotificationInitial()) {
    on<LoadNotifications>(_onLoadNotifications);
    on<LoadNotificationDetail>(_onLoadNotificationDetail);
    on<MarkNotificationAsRead>(_onMarkNotificationAsRead);
    on<DeleteNotification>(_onDeleteNotification);
  }

  Future<void> _onLoadNotifications(
    LoadNotifications event,
    Emitter<NotificationState> emit,
  ) async {
    print('üî• LoadNotifications ƒë∆∞·ª£c g·ªçi! Current state: ${state.runtimeType}');
    print('üî• StackTrace: ${StackTrace.current}');
    emit(NotificationsLoading());
    try {
      final notifications = await _notificationRepository.getNotifications();
      emit(NotificationsLoaded(notifications));
    } catch (e) {
      emit(NotificationActionFailed(e.toString()));
    }
  }

  Future<void> _onLoadNotificationDetail(
    LoadNotificationDetail event,
    Emitter<NotificationState> emit,
  ) async {
    print(' LoadNotificationDetail ƒë∆∞·ª£c g·ªçi v·ªõi ID: ${event.id}');
    print(' Current state tr∆∞·ªõc khi emit: ${state.runtimeType}');
    emit(NotificationDetailLoading());
    try {
      final notification =
          await _notificationRepository.getNotificationById(event.id);

      if (notification != null) {
        if (!notification.isRead) {
          print(' Marking notification as read: ${notification.id}');
          await _notificationRepository.markAsRead(event.id);
          final updatedNotification = notification.copyWith(isRead: true);
          emit(NotificationDetailLoaded(updatedNotification));
          print('Emitted NotificationDetailLoaded v·ªõi notification ƒë√£ ƒë·ªçc');
        } else {
          emit(NotificationDetailLoaded(notification));
          print('Emitted NotificationDetailLoaded v·ªõi notification ƒë√£ c√≥ s·∫µn');
        }
        print(' Notification loaded: ${notification.title}');
      } else {
        print('Kh√¥ng t√¨m th·∫•y notification v·ªõi ID: ${event.id}');
        emit(const NotificationActionFailed('Kh√¥ng t√¨m th·∫•y th√¥ng b√°o'));
      }
    } catch (e) {
      print(' L·ªói khi load notification detail: $e');
      emit(NotificationActionFailed(e.toString()));
    }
  }

  Future<void> _onMarkNotificationAsRead(
    MarkNotificationAsRead event,
    Emitter<NotificationState> emit,
  ) async {
    try {
      await _notificationRepository.markAsRead(event.id);

      if (state is NotificationsLoaded) {
        final currentState = state as NotificationsLoaded;
        final updatedNotifications =
            currentState.notifications.map((notification) {
          if (notification.id == event.id) {
            return notification.copyWith(isRead: true);
          }
          return notification;
        }).toList();

        emit(NotificationsLoaded(updatedNotifications));
      }
    } catch (e) {
      print('L·ªói khi ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc: $e');
    }
  }

  Future<void> _onDeleteNotification(
    DeleteNotification event,
    Emitter<NotificationState> emit,
  ) async {
    try {
      await _notificationRepository.deleteNotification(event.id);
      emit(const NotificationActionSuccess('X√≥a th√¥ng b√°o th√†nh c√¥ng'));

      print(' ƒê√£ x√≥a th√¥ng b√°o th√†nh c√¥ng');
    } catch (e) {
      emit(NotificationActionFailed(e.toString()));
    }
  }
}
